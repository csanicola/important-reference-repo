plot(cos, 0, 2*pi)
plot(exp, 1, 5)
plot(dnorm, -3, +3,
col = "#cc0000",
lwd = 5,
main = "Standard Normal Distribution",
xlab = "z-scores",
ylab = "Density")
detach("package:datasets", unload = TRUE)
dev.off()
cat("\014")
library(datasets)
?mtcars
head(mtcars)
cylinders <- table(mtcars$cyl)
barplot(cylinders)
rm(list = ls())
# For base
detach("package:datasets", unload = TRUE)  # For base
dev.off()  # But only if there IS a plot
cat("\014")  # ctrl+L
library(datasets)
?iris
head(iris)
hist(iris$Sepal.Length)
hist(iris$Sepal.Width)
hist(iris$Petal.Length)
hist(iris$Petal.Width)
par(mfrow = c(3, 1))
hist(iris)
hist(iris$Petal.Width [iris$Species == "setosa"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Setosa",
xlab = "",
col = "red")
hist(iris$Petal.Width [iris$Species == "setosa"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Setosa",
xlab = "",
col = "red")
hist(iris$Petal.Width [iris$Species == "versicolor"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Versicolor",
xlab = "",
col = "purple")
hist(iris$Petal.Width [iris$Species == "virginica"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Virginica",
xlab = "",
col = "blue")
hist(iris$Petal.Width [iris$Species == "versicolor"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Versicolor",
xlab = "",
col = "purple")
hist(iris$Petal.Width [iris$Species == "setosa"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Setosa",
xlab = "",
col = "red")
par(mfrow=c(1, 1))
detach("package:datasets", unload = TRUE)  # For base
dev.off()  # But only if there IS a plot
cat("\014")  # ctrl+L
library(datasets)  # Load/unload base packages manually
?mtcars
head(mtcars)
hist(mtcars$wt)
plot(mtcars$wt, mtcars$mpg)
plot(mtcars$wt, mtcars$mpg,
pch = 19,         # Solid circle
cex = 1.5,        # Make 150% size
col = "#cc0000",  # Red
main = "MPG as a Function of Weight of Cars",
xlab = "Weight (in 1000 pounds)",
ylab = "MPG")
detach("package:datasets", unload = TRUE)  # For base
dev.off()  # But only if there IS a plot
cat("\014")  # ctrl+L
library(datasets)  # Load/unload base packages manually
?lynx
head(lynx)
hist(lynx)
hist(lynx,
breaks = 14,          # "Suggests" 14 bins
freq   = FALSE,       # Axis shows density, not freq.
col    = "thistle1",  # Color for histogram
main   = paste("Histogram of Annual Canadian Lynx",
"Trappings, 1821-1934"),
xlab   = "Number of Lynx Trapped")
curve(dnorm(x, mean = mean(lynx), sd = sd(lynx)),
col = "thistle4",  # Color of curve
lwd = 2,           # Line width of 2 pixels
add = TRUE)        # Superimpose on previous graph
lines(density(lynx), col = "blue", lwd = 2)
lines(density(lynx, adjust = 3), col = "purple", lwd = 2)
rug(lynx, lwd = 2, col = "gray")
detach("package:datasets", unload = TRUE)  # For base
dev.off()  # But only if there IS a plot
cat("\014")  # ctrl+L
library(datasets)  # Load/unload base packages manually
head(iris)
summary(iris$Species)       # Categorical variable
summary(iris$Sepal.Length)  # Quantitative variable
summary(iris)               # Entire data frame
detach("package:datasets", unload = TRUE)   # For base
cat("\014")  # ctrl+L
library(datasets)  # Load base packages manually
if (!require("pacman")) install.packages("pacman")
pacman::p_load(pacman, psych)
head(iris)
p_help(psych)           # Opens package PDF in browser
p_help(psych, web = F)  # Opens help in R Viewer
describe(iris$Sepal.Length)  # One quantitative variable
describe(iris$Sepal.Length)  # One quantitative variable
describe(iris)               # Entire data frame
rm(list = ls())
p_unload(all)  # Remove all add-ons
detach("package:datasets", unload = TRUE)   # For base
cat("\014")  # ctrl+L
library(datasets)  # Load/unload base packages manually
head(iris)
hist(iris$Petal.Length)
summary(iris$Petal.Length)
summary(iris$Species)  # Get names and n for each species
hist(iris$Petal.Length[iris$Species == "versicolor"],
main = "Petal Length: Versicolor")
hist(iris$Petal.Length[iris$Species == "virginica"],
main = "Petal Length: Virginica")
hist(iris$Petal.Length[iris$Species == "setosa"],
main = "Petal Length: Setosa")
hist(iris$Petal.Length[iris$Petal.Length < 2],
main = "Petal Length < 2")
hist(iris$Petal.Length[iris$Species == "virginica" &
iris$Petal.Length < 5.5],
main = "Petal Length: Short Virginica")
i.setosa <- iris[iris$Species == "setosa", ]
head(i.setosa)
summary(i.setosa$Petal.Length)
hist(i.setosa$Petal.Length)
rm(list = ls())
detach("package:datasets", unload = TRUE)  # For base
dev.off()  # But only if there IS a plot
cat("\014")  # ctrl+L
n1
n1 <- 15  # Double precision by default
n1
typeof(n1)
n2 <- 1.5
n2
typeof(n2)
c1 <- "c"
c1
typeof(c1)
c2 <- "a string of text"
c2
typeof(c2)
l1 <- TRUE
l1
typeof(l1)
l2 <- F
l2
typeof(l2)
v1 <- c(1, 2, 3, 4, 5)
v1
is.vector(v1)
v2 <- c("a", "b", "c")
v2
is.vector(v2)
v3 <- c(TRUE, TRUE, FALSE, FALSE, TRUE)
v3
is.vector(v3)
m1 <- matrix(c(T, T, F, F, T, F), nrow = 2)
m1
m2 <- matrix(c("a", "b",
"c", "d"),
nrow = 2,
byrow = T)
m2
a1 <- array(c( 1:24), c(4, 3, 2))
vNumeric   <- c(1, 2, 3)
a1
vNumeric   <- c(1, 2, 3)
vCharacter <- c("a", "b", "c")
vLogical   <- c(T, F, T)
dfa <- cbind(vNumeric, vCharacter, vLogical)
dfa  # Matrix of one data type
df <- as.data.frame(cbind(vNumeric, vCharacter, vLogical))
df  # Makes a data frame with three different data types
o1 <- c(1, 2, 3)
o2 <- c("a", "b", "c", "d")
o3 <- c(T, F, T, T, F)
list1 <- list(o1, o2, o3)
list1
list2 <- list(o1, o2, o3, list1)  # Lists within lists!
list2
(coerce1 <- c(1, "b", TRUE))
typeof(coerce1)
(coerce2 <- 5)
typeof(coerce2)
(coerce3 <- as.integer(5))
typeof(coerce3)
(coerce4 <- c("1", "2", "3"))
typeof(coerce4)
(coerce5 <- as.numeric(c("1", "2", "3")))
typeof(coerce5)
(coerce6 <- matrix(1:9, nrow= 3))
is.matrix(coerce6)
(coerce7 <- as.data.frame(matrix(1:9, nrow= 3)))
is.data.frame(coerce7)
rm(list = ls())
cat("\014")  # ctrl+L
(x1 <- 1:3)
(y  <- 1:9)
(df1 <- cbind.data.frame(x1, y))
typeof(df1$x1)
str(df1)
# the first thing you need to do when using R is install R itself, RStudio (as the application to use R) and the various packages to have access to the tools used with R
# the main package to install is tidyverse
install.packages("tidyverse")
# other packages to download that will be used here:
install.packages(
c("arrow", "babynames", "curl", "duckdb", "gapminder",
"ggrepel", "ggridges", "ggthemes", "hexbin", "janitor", "Lahman",
"leaflet", "maps", "nycflights13", "openxlsx", "palmerpenguins",
"repurrrsive", "tidymodels", "writexl")
)
library(palmerpenguins)
library(ggthemes)
# to actually use tidyverse you need to import the library
library(tidyverse)
# for the first exercise we will need to install the palmerpenguins package which has a penguins dataset
library(palmerpenguins)
library(ggthemes) # this is a supplementary package to ggplot2 which includes more theme options for the visuals
library(palmerpenguins)
# first want to look at the data frame of the penguins to know what the data looks like and what we are working with
penguins # this shows the top of the dataset
glimpse(penguins) # this shows each column available in the dataset and then the first couple of observations for each column
# to start by creating the plot, we need to define the plot object and then add the layers to it
ggplot(data = penguins)
# right now this is empty, we need to add mapping arguments so it knows what visuals we want
# the mapping visual properties are 'aesthetics' using the aes() function
# we use the aes() to define the x and y arguments for the x and y axis
# since we want to look at flipper length and body mass we will use those
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g)
)
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
geom_point()
# for scatterplots the easiest thing to do to add to the visual is doing different colored points
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)
) +
geom_point()
# this will show different colors by grouping the species together
# ggplot will automatically add colors (process called scaling) but you can specify colors too
# another thing to do is adding a smoothing curve to show the trends in the plots
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)
) +
geom_point() +
geom_smooth(method = "lm") # smoothing is to add the line and "lm" is to say we want to draw a line of best fit based on the linear model
# using the method this way the lines are separated because the colors are separated in the aes() function aka the global level but if we move it to the geom_point() function aka the local level then its a singular line
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
geom_point(mapping = aes(color = species)) +
geom_smooth(method = "lm")
# to account for color blindness or issues with visualizing the colors, adding different shapes to the plots is another way to differentiate the data
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
geom_point(mapping = aes(color = species, shape = species)) +
geom_smooth(method = "lm")
# another thing is adding labels so it's easier to understand because sometimes the variable names from the table are coding in a way other people might not understand
# you would use the lab() function for this
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
geom_point(aes(color = species, shape = species)) +
geom_smooth(method = "lm") +
labs(
title = "Body mass and flipper length",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Flipper length (mm)", y = "Body mass (g)",
color = "Species", shape = "Species"
) +
scale_color_colorblind()
# for the first exercise we will need to install the palmerpenguins package which has a penguins dataset
library(palmerpenguins)
# first want to look at the data frame of the penguins to know what the data looks like and what we are working with
penguins # this shows the top of the dataset
ggplot(
data = penguins,
mapping = aes(x = bill_length_mm, y = bill_depth_mm)
)
ggplot(
data = penguins,
mapping = aes(x = bill_length_mm, y = bill_depth_mm)
) +
geom_plot()
ggplot(
data = penguins,
mapping = aes(x = bill_length_mm, y = bill_depth_mm)
) +
geom_plot()
ggplot(
data = penguins,
mapping = aes(x = bill_length_mm, y = bill_depth_mm)
) +
geom_point()
# to actually use tidyverse you need to import the library
library(tidyverse)
library(palmerpenguins)
library(ggthemes) # this is a supplementary package to ggplot2 which includes more theme options for the visuals
# main question: do penguins with longer flippers weigh more or less than penguins with shorter flippers?
# other question: what does the relationship between flipper length and body mass look like?
# first want to look at the data frame of the penguins to know what the data looks like and what we are working with
penguins # this shows the top of the dataset
glimpse(penguins) # this shows each column available in the dataset and then the first couple of observations for each column
# from this we can see the main variables we need are: species, flipper_length_mm, body_mass_g
# to start by creating the plot, we need to define the plot object and then add the layers to it
ggplot(data = penguins)
# right now this is empty, we need to add mapping arguments so it knows what visuals we want
# the mapping visual properties are 'aesthetics' using the aes() function
# we use the aes() to define the x and y arguments for the x and y axis
# since we want to look at flipper length and body mass we will use those
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g)
)
# the graph right now is blank because it still needs more structure
# as of right now it doesnt know how to graph the actual penguin data so we need to tell it how
# geom - the geometric object that a plot uses to represent the data (ex: bar graph, line graph, plots, boxplot, etc.)
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
geom_point()
# running this will result in a warning message:
# "Removed 2 rows containing missing values (geom_point())."
# this is because two of the penguins either dont have a flipper length or body mass so they couldn't be plotted
# for scatterplots the easiest thing to do to add to the visual is doing different colored points
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)
) +
geom_point()
# this will show different colors by grouping the species together
# ggplot will automatically add colors (process called scaling) but you can specify colors too
# another thing to do is adding a smoothing curve to show the trends in the plots
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)
) +
geom_point() +
geom_smooth(method = "lm") # smoothing is to add the line and "lm" is to say we want to draw a line of best fit based on the linear model
# using the method this way the lines are separated because the colors are separated in the aes() function aka the global level but if we move it to the geom_point() function aka the local level then its a singular line
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
geom_point(mapping = aes(color = species)) +
geom_smooth(method = "lm")
# to account for color blindness or issues with visualizing the colors, adding different shapes to the plots is another way to differentiate the data
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
geom_point(mapping = aes(color = species, shape = species)) +
geom_smooth(method = "lm")
# another thing is adding labels so it's easier to understand because sometimes the variable names from the table are coding in a way other people might not understand
# you would use the lab() function for this
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
geom_point(aes(color = species, shape = species)) +
geom_smooth(method = "lm") +
labs(
title = "Body mass and flipper length",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Flipper length (mm)", y = "Body mass (g)",
color = "Species", shape = "Species"
) +
scale_color_colorblind() # this is a function to pick colorblind safe colors
ggplot(
data = penguins,
mapping = aes(x = bill_length_mm, y = bill_depth_mm)
) +
geom_point()
ggplot(
data = penguins,
mapping = aes(x = species, y = bill_depth_mm)
) +
geom_point()
ggplot(
data = penguins,
mapping = aes(x = species, y = bill_depth_mm)
) +
geom_bar()
ggplot(data = penguins) +
geom_point()
# Install and Load Packages
install.packages("tidyverse")
# or
head(namcshc2023)
# -------------------------------------------------------------------------
# Using R with the 2023 National Ambulatory Medical Care Survey Health Center
# (NAMCS HC) Component Public Use Data File
#
# Please follow the steps below to load the 2023 NAMCS HC Component public use
# data file into R.
#
# 1. Create a new folder on your local workstation, for example, C:\namcshc2023.
#
# 2. Download the namcshc2023_r.rds file from the website and save to the folder
# C:\namcshc2023.
#
# Please note that this program will replace the dataset in the default
# directory, if one is present.
#
# For details and guidance on how to properly conduct statistical analyses
# with these data, including the appropriate use of weights to create
# nationally representative estimates, please refer to the technical
# documentation that accompanies the 2023 NAMCS Health Center Component.
#
# For any questions, suggestions, or comments concerning NAMCS HC Component data,
# please contact the Division of Health Care Statistics at ambcare@cdc.gov.
# -------------------------------------------------------------------------
# Install and Load Packages
install.packages("tidyverse")
# Read in NAMCS HC 2023  Public Use File R Dataset
namcshc2023 <- read_rds("//C://namcshc2023//namcshc2023_r.rds")
namcshc2023 <- read_rds("//C://namcshc2023//namcshc2023_r.rds")
# Install and Load Packages
install.packages("tidyverse")
# Install and Load Packages
install.packages("tidyverse")
Yeslibrary("tidyverse")
# Install and Load Packages
install.packages("tidyverse")
install.packages("systemfonts", type = "source")
install.packages("ragg", type = "source")
# 1. Getting Started with R
# 1.2.1 Basic Computations Objects
# Addition
5+6
# if you want to run all lines of code in our script, you would use the source button but
# you can use the source function
source("Mastering_Health_Science_Using_R.R")
# calling a function
# ceiling() returns the ceiling of your input
# floor() returns the floor of your input
# round() rounds your input to the closest integer
ceiling(3.7)
# you can also see what the current working directory is by using getwd()
getwd()
# to set the current working directory, you can use setwd()
setwd('/Users/carolinesanicola/Documents/GitHub/important-reference-repo/R')
# check
getwd()
# now update the path to the csv file
df <- read.csv("https://github.com/alicepaul/health-data-science-using-r/blob/main/book/data/fake_names.csv")
# now update the path to the csv file
df <- read.csv("https://github.com/alicepaul/health-data-science-using-r/blob/b71bbec95709d0107c166d97654890b9500678ef/book/data/fake_names.csv")
# now update the path to the csv file
df <- read.csv("https://raw.githubusercontent.com/alicepaul/health-data-science-using-r/b71bbec95709d0107c166d97654890b9500678ef/book/data/fake_names.csv")
df
# the most important thing to do is download packages and one of the most important is 'tidyverse'
# to see what packages are already installed use `installed.packages()`
installed.packages()
# the most important package to download is tidyverse
install.package('todyverse')
# the most important package to download is tidyverse
install.packages('tidyverse')
library(tidyverse)
# an object is a named instance of a data structure
ex_num <- 4
# 2.1 Data Types
# each individual value in R has a type: logical, integer, double or character
# you can use typeof() function to find the type of vector
typeof(ex_num)
typeof(ex_int)
# double is a numeric value with a stored decimal
# an integer is a whole number without a decimal
# to indicate we want the number to be an integer object, you need to use `L` after the number
ex_int <- 4L
typeof(ex_int)
# characters have letters
ex_char <- "Alice"
# logicals or booleans are TRUE and FALSE
ex_bool <- TRUE
typeof(ex_char)
typeof(ex_bool)
# booleans can actually be interpreted as 0/1 and can be used in logic
TRUE + FALSE + TRUE
