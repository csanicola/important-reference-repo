getwd()
3 + 5
## I am adding 3 and 5. R is fun!
3+5
# Intro to R Lesson
# Feb 16th, 2016
# Interacting with R
## I am adding 3 and 5. R is fun!
3+5
## I am adding 3 and 5. R is fun!
3+5
x <- 3
y <- 5
y
x + y
number <- x + y
x <- 5
number
number <- x + y
y <- 10
number <- x + y
glengths <- c(4.6, 3000, 50000)
glengths
species <- c("ecoli", "human", "corn")
species
# Forget to put quotes around corn
species <- c("ecoli", "human", corn)
species <- c("ecoli", "human", "corn")
combined <- c(glengths, species)
expression <- c("low", "high", "medium", "high", "low", "medium", "high")
expression <- factor(expression)
samplegroup <- c("CTL", "CTL", "CTL", "KO", "KO", "KO", "OE", "OE", "OE")
samplegroup <- factor(samplegroup)
# Create a data frame and store it as a variable called 'df'
df <- data.frame(species, glengths)
df
titles <- c("Catch-22", "Pride and Prejudice", "Nineteen Eighty Four")
pages <- c(453, 432, 328)
favorite_books <- data.frame(titles, pages)
favorite_books
list1 <- list(species, df, number)
list1
list2 <- list(species, glengths, number)
list2
glengths <- c(glengths, 90) # adding at the end
glengths <- c(30, glengths) # adding at the beginning
sqrt(81)
sqrt(glengths)
round(3.14159)
?round
args(round)
example("round")
round(3.14159, digits=2)
round(3.14159, 2)
?mean
mean(glengths)
test <- c(1, NA, 2, 3, NA, 4)
mean(test)
test
na.omit(test)
na.omit(mean(test))
test.omit <- test(na.action = na.omit)
test <- c(1, NA, 2, 3, NA, 4)
test.omit <- test(na.action = na.omit)
test <- c(1, NA, 2, 3, NA, 4)
mean(test, na.rm = TRUE)
sort(test, decreasing = TRUE)
square_it <- function(x) {
square <- x * x
return(square)
}
square_it(5)
multiply_it <- function(x, y) {
multiply <- x * y
return(multiply)
}
multiply_it(x=4,y=6)
?read.csv
metadata <- read.csv(file="data/mouse_exp_design.csv")
metadata <- read.csv(file="data/mouse_exp_design.txt")
View(metadata)
proj_summary <- read.table(file="data/project-summary.txt")
View(proj_summary)
head(metadata)
class(glenths)
class(glengths)
class(metadata)
summary(proj_summary)
summary(proj_summary)
length(samplegroup)
dim(proj_summary)
rownames(metadata)
ncol(proj_summary)
temp_conv <- function(temp_f) {
temp_k <- ((temp_f -32) * 5 / 9) + 273.15
return(temp_k)
}
temp_conv(70)
round(temp_conv(70), 2)
round(temp_conv(70), 1)
age <- c(15, 22, 45, 52, 73, 81)
age[5]
age[-5]
age[c(3,5,6)]   ## nested
# OR
## create a vector first then select
idx <- c(3,5,6) # create vector of the elements of interest
age[idx]
age[1:4]
age[1:4]
age[4:1]
alphabets[(1,2,5)]
alphabets[c(1,2,5)]
alphabets <- c("C", "D", "X", "L", "F")
alphabets[c(1,2,5)]
alphabets[-3]
alphabets[5:1]
age > 50
age > 50 | age < 18
age
age[age > 50 | age < 18]  ## nested
# OR
## create a vector first then select
idx <- age > 50 | age < 18
age[idx]
which(age > 50 | age < 18)
age[which(age > 50 | age < 18)]  ## nested
# OR
## create a vector first then select
idx_num <- which(age > 50 | age < 18)
age[idx_num]
which(age > 50 | age < 18)
age[which(age > 50 | age < 18)]  ## nested
# OR
## create a vector first then select
idx_num <- which(age > 50 | age < 18)
age[idx_num]
expression[expression == "high"]    ## This will only return those elements in the factor equal to "high"
samplegroup[which(samplegroup != "KO")]
expression
str(expression)
Factor w/ 3 levels "high","low","medium": 2 1 3 1 2 3 1
expression <- factor(expression, levels=c("low", "medium", "high"))     # you can re-factor a factor
str(expression)
str(samplegroup)
samplegroup <- factor(samplegroup, levels=c("medium", "high", "low"))
str(samplegroup)
samplegroup <- factor(samplegroup, levels=c("KO", "CTL", "OE"))
str(samplegroup)
samplegroup <- c("CTL", "CTL", "CTL", "KO", "KO", "KO", "OE", "OE", "OE")
str(samplegroup)
samplegroup <- factor(samplegroup, levels=c("KO", "CTL", "OE"))
str(samplegroup)
sessionInfo() #Print version information about R, the OS and attached or loaded packages
# OR
search() #Gives a list of attached packages
install.packages("ggplot2")
library(ggplot2)
sessionInfo()
install.packages("tidyverse")
install.packages("tidyverse")
# Extract value 'Wt'
metadata[1, 1]
# Extract value '1'
metadata[1, 3]
# Extract third row
metadata[3, ]
# Extract third column
metadata[ , 3]
# Extract third column as a data frame
metadata[ , 3, drop = FALSE]
# Dataframe containing first two columns
metadata[ , 1:2]
# Data frame containing first, third and sixth rows
metadata[c(1,3,6), ]
# Extract the celltype column for the first three samples
metadata[c("sample1", "sample2", "sample3") , "celltype"]
# Check column names of metadata data frame
colnames(metadata)
# Check row names of metadata data frame
rownames(metadata)
# Extract the genotype column
metadata$genotype
# Extract the first five values/elements of the genotype column
metadata$genotype[1:5]
metadata[c("sample2", "sample8"), c("genotype", "replicate")]
metadata$genotype[c(1,9)]
metadata$replicate
metadata[ , 3, drop = FALSE]
metadata$celltype == "typeA"
logical_idx <- metadata$celltype == "typeA"
metadata[logical_idx, ]
which(metadata$celltype == "typeA")
idx <- which(metadata$celltype == "typeA")
metadata[idx, ]
which(metadata$replicate > 1)
idx <- which(metadata$replicate > 1)
metadata[idx, ]
metadata[which(metadata$replicate > 1), ]
sub_meta <- metadata[which(metadata$replicate > 1), ]
excer_meta[which(metadata$genotype == "KO"), ]
metadata[which(metadata$genotype == "KO"), ]
list1[[2]]
comp2 <- list1[[2]]
class(comp2)
list1[[1]]
[1] "ecoli" "human" "corn"
list1[[1]][1]
random <- list[c(metadata, age, list1, samplegroup, number)]
random <- list(c(metadata, age, list1, samplegroup, number))
random[[4]]
random[[1]]
random[[5]]
random[[1]]
random[[2]]
random[[1]]
random
random <- list(c(metadata, age, list1, samplegroup, number))
random
View(random)
View(random)
random <- list(c(metadata, age, list1, samplegroup, number))
class(random)
random <- NULL
random <- list(c(metadata, age, list1, samplegroup, number))
random
names(list1)
# Name components of the list
names(list1) <- c("species", "df", "number")
names(list1)
names(list1) <- c("species", "df", "number")
names(list1)
# Extract 'df' component
list1$df
names(random)
names(random) <- c("metadata", "age", "list1", "samplegroup", "number")
names(random) <- c("metadata")
names(random)
list1
list1[[2]]
random <- NULL
random
samplegroup
random <- list(c(metadata, age, list1, samplegroup, number))
random <- NULL
random <- NULL
random
random <- list(c(metadata, age, list1, samplegroup, number))
random
rpkm_data <- read.csv("data/counts.rpkm.csv")
rpkm_data <- read.csv("data/counts.rpkm.txt")
head(rpkm_data)
ncol(rpkm_data)
nrow(metadata)
vector1 %in% vector2
A <- c(1,3,5,7,9,11)   # odd numbers
B <- c(2,4,6,8,10,12)  # even numbers
# test to see if each of the elements of A is in B
A %in% B
A <- c(1,3,5,7,9,11)   # odd numbers
B <- c(2,4,6,8,1,5)  # add some odd numbers in
# test to see if each of the elements of A is in B
A %in% B
intersection <- A %in% B
intersection
A[intersection]
any(A %in% B)
all(A %in% B)
any(B %in% A)
onlyB <- B %in% A
B[onlyB]
A <- c(10,20,30,40,50)
B <- c(50,40,30,20,10)  # same numbers
ment of A is in B
A %in% B
# test to see if each element of A is in the same position in B
A == B
# use all() to check if they are a perfect match
all(A == B)
x <- rownames(metadata)
y <- colnames(rpkm_data)
all(x %in% y)
all(rownames(metadata) %in% colnames(rpkm_data))
x == y
all(x == y)
important_genes <- c("ENSMUSG00000083700", "ENSMUSG00000080990", "ENSMUSG00000065619", "ENSMUSG00000047945", "ENSMUSG00000081010", "ENSMUSG00000030970")
all(important_genes %in% rpkm_data)
rownames(rpkm_data)
imp_gen_col <- important_genes %in% rpkm_data
rpkm_data[imp_gen_col]
imp_gen_col
imp_gen_col <- NULL
important_genes %in% rownames(rpkm_data)
idx <- rownames(rpkm_data) %in% important_genes
ans <- rpkm_data[idx, ]
idx2 <- which(rownames(rpkm_data) %in% important_genes)
ans2 <- rpkm_data[idx2, ]
ans3 <- rpkm_data[important_genes, ]
teaching_team <- c("Jihe", "Mary", "Meeta", "Radhika")
# Extracting values from a vector
teaching_team[c(2, 4)]
teaching_team
# Extracting values and reordering them
teaching_team[c(4, 2)]
# Extracting all values and reordering them
teaching_team[c(4, 2, 1, 3)]
# Saving the results to a variable
reorder_teach <- teaching_team[c(4, 2, 1, 3)]
first <- c("A","B","C","D","E")
second <- c("B","D","E","A","C")
reorder_idx <- match(first,second)
second[reorder_idx]
second_reordered <- second[reorder_idx]
first <- c("A","B","C","D","E")
second <- c("D","B","A")  # remove values
match(first,second)
second[match(first, second)]
# Check row names of the metadata
rownames(metadata)
# Check the column names of the counts data
colnames(rpkm_data)
genomic_idx <- match(rownames(metadata), colnames(rpkm_data))
genomic_idx
# Reorder the counts data frame to have the sample names in the same order as the metadata data frame
rpkm_ordered  <- rpkm_data[ , genomic_idx]
# View the reordered counts
View(rpkm_ordered)
all(rownames(metadata) == colnames(rpkm_ordered))
mean(rpkm_ordered$sample1)
library(purrr)  # Load the purrr
samplemeans <- map_dbl(rpkm_ordered, mean)
samplemeans
# Check length of the vector before adding it to the data frame
length(samplemeans)
# Create a numeric vector with ages. Note that there are 12 elements here
age_in_days <- c(40, 32, 38, 35, 41, 32, 34, 26, 28, 28, 30, 32)
new_metadata <- data.frame(metadata, samplemeans, age_in_days)
# Take a look at the new_metadata object
View(new_metadata)
animals <- read.csv("data/animals.txt")
row.names(animals)
class(animals)
length(row(animals))
length(column(animals))
length(col(animals))
animals$speed
animals$speed[40]
animals$speed[40.0]
load("data/new_metadata.RData")
View(new_metadata)
library(ggplot2)
ggplot(new_metadata) # what happens?
new_metadata <- readRDS("data/new_metadata.rds")
ggplot(new_metadata) # what happens?
ggplot(new_metadata) +
geom_point() # note what happens here
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans))
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans, color = genotype))
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans, color = genotype,
shape=celltype))
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans, color = genotype,
shape=celltype), size=2.25)
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans, color = genotype,
shape=celltype), size=3.0) +
theme_bw()
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans, color = genotype,
shape=celltype), size=2.25) +
theme_bw() +
theme(axis.title = element_text(size=rel(1.5)))
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans, color = genotype,
shape=celltype), size=2.25) +
theme_bw() +
theme(axis.title = element_text(size=rel(1.5)))	+
ggtitle("Mean Age in Days of Genotype & Celltype") +
xlab("Age (days)") + ylab("Mean expression")
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans, color = genotype,
shape=celltype), size=2.25) +
theme_bw() +
theme(axis.title = element_text(size=rel(1.5)))	+
ggtitle("Mean Age in Days of Genotype & Celltype") +
xlab("Age (days)") + ylab("Mean expression") +
theme(plot.title=element_text(hjust=0.5))
name_of_function <- function(arguments) {
statements or code that does something
theme_bw() +
theme(axis.title=element_text(size=rel(1.5))) +
theme(plot.title=element_text(size=rel(1.5), hjust=0.5))
personal_theme <- function(){
theme_bw() +
theme(axis.title=element_text(size=rel(1.5))) +
theme(plot.title=element_text(size=rel(1.5), hjust=0.5))
}
theme_bw() +
theme(axis.title=element_text(size=rel(1.5)), plot.title=element_text(size=rel(1.5), hjust=0.5))
theme_bw() +
theme(axis.title=element_text(size=rel(1.5))) +
theme(plot.title=element_text(size=rel(1.5), hjust=0.5))
theme_bw() +
theme(axis.title=element_text(size=rel(1.5))) +
theme(plot.title=element_text(size=rel(1.5), hjust=0.5))
ggplot(new_metadata) +
geom_point(aes(x=age_in_days, y=samplemeans, color=genotype, shape=celltype), size=rel(3.0)) +
xlab("Age (days)") +
ylab("Mean expression") +
ggtitle("Expression with Age") +
personal_theme()
ggplot2(new_metadata)
ggplot2(new_metadata)
geom_boxplot(new_metadata)
ggplot(new_metadata) +
geom_boxplot(aes(x=genotype, y=samplemeans))
ggplot(new_metadata) +
geom_boxplot(aes(x=genotype, y=samplemeans, color=genotype))
ggplot(new_metadata) +
geom_boxplot(aes(x=genotype, y=samplemeans, color=samplemeans))
ggplot(new_metadata) +
geom_boxplot(aes(x=genotype, y=samplemeans, fill=samplemeans))
ggplot(new_metadata) +
geom_boxplot(aes(x=genotype, y=samplemeans, fill=genotype))
ggplot(new_metadata) +
geom_boxplot(aes(x=age_in_days, y=samplemeans, fill=genotype))
ggplot(new_metadata) +
geom_boxplot(aes(x=genotype, y=samplemeans, fill=genotype))
ggplot(new_metadata) +
geom_boxplot(aes(x=genotype, y=samplemeans, fill=celltype))
xlab("Genotype") +
ylab("Mean expression") +
theme_bw() +
theme(axis.title=element_text(size=rel(1.25))) +
theme(plot.title=element_text(size=rel(1.5), hjust=0.5))
ggplot(new_metadata) +
geom_boxplot(aes(x=genotype, y=samplemeans, fill=celltype)) +
ggtitle("Genotype differences in average gene expression")
xlab("Genotype") +
ylab("Mean expression")
xlab("Genotype") +
ylab("Mean expression")
ggplot(new_metadata) +
geom_boxplot(aes(x=genotype, y=samplemeans, fill=celltype)) +
ggtitle("Genotype differences in average gene expression") +
xlab("Genotype") +
ylab("Mean expression") +
theme_bw() +
theme(axis.title=element_text(size=rel(1.25))) +
theme(plot.title=element_text(size=rel(1.5), hjust=0.5))
new_metadata$genotype(c("Wt", "KO"))
new_metadata$genotype[c("Wt", "KO")]
ggplot(new_metadata) +
geom_boxplot(aes(x=genotype, y=samplemeans, fill=celltype)) +
ggtitle("Genotype differences in average gene expression") +
xlab("Genotype") +
ylab("Mean expression") +
theme_bw() +
theme(axis.title=element_text(size=rel(1.25))) +
theme(plot.title=element_text(size=rel(1.5), hjust=0.5))
new_metadata$genotypec("Wt", "KO")
new_metadata$genotypec <- ("Wt", "KO")
new_metadata$genotypec <- ("Wt","KO")
new_metadata$genotypec <- ("Wt","KO")
new_metadata <- new_metadata$genotype
