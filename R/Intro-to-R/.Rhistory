library(gtsummary)
library(dplyr)
tbl_summary(penguins[, "species"]) # without pipes
penguins |>
select(species) |>
tbl_summary()
# scripts can use either just one line of code
1+1
# or multiple lines of code
2*2
1+2*3-5
# to store data in R you do the below to a variable name
x <- 4
# (shortcut for the `<-` is `alt + -`)
x + x
my_variable <- 5
MY_VARIABLE <- 6
My_Variable <- 7
income <- 100
taxes <- 20
net_income <- income - taxes
# gross_income <- net_income + taxes
income <- 200; taxes <- 30
income2 <- taxes2 <- 100
age <- c(28, 48, 47, 71, 22, 80, 48, 30, 31)
purchase <- c(20, 59, 2, 12, 22, 160, 34, 34, 29)
bookstore <- data.frame(age, purchase)
bookstore
height <- c(61, 62, 60, 65, 65, 63, 70)
weight <- c(120, 200, 220, 200, 195, 200, 210)
height_weight <- data.frame(height, weight)
height_weight
x <- 1:5 # this creates a vector with numbers 1 through 5
x
y <- 5:1 # this creates a vector with numbers 5 through 1 in reverse order
y
z <- c(1:5, 4:1) # need to start the second part at 4 or else would have duplicate 5's
z
mean(age)
cor(age, purchase) # the default method is pearson
cor(age, purchase, method = "spearman") # but the method argument lets you specify if you want to calculate using another way
mean(height)
cor(height, weight)
?length # this will return the number of variables in a vector
length(height)
?sort # sorts the order of a vector by either ascending or descending order
sort(weight)
sort(weight, decreasing = TRUE) # the decreasing argument is logical and is asking if the sorting should be done in increasing or decreasing order; by default it is sorted by ascending
sqrt(pi)
exp(2) * log(4)
1/0
0/0
sqrt(-1)
install.packages('ggplot2')
library(ggplot2)
install.packages('palmerpenguins')
library(palmerpenguins)
msleep
View(msleep) # this will show us the dataframe in a separate window within Rstudio so we can see the entire dataset
head(msleep) # shows the first few rows of the dataframe
tail(msleep) # shows the last few rows of the dataframe
dim(msleep) # shows how big the dataframe is (rows x columns)
str(msleep) # returns info about the dataframe like column name, data type, how many rows of data, sample of types of data in each column
names(msleep) # returns a vector of the names of the variables in the dataframe (column names)
summary(msleep)
msleep$sleep_total
mean(msleep$sleep_total)      # Mean
median(msleep$sleep_total)    # Median
max(msleep$sleep_total)       # Max
min(msleep$sleep_total)       # Min
sd(msleep$sleep_total)        # Standard deviation
var(msleep$sleep_total)       # Variance
quantile(msleep$sleep_total)  # Various quantiles
sum(msleep$sleep_total > 8)   # Frequency (count)
mean(msleep$sleep_total > 8)  # Relative frequency (proportion)
mean(msleep$sleep_rem, na.rm = TRUE)
cor(msleep$sleep_total, msleep$sleep_rem, use = "complete.obs")
table(msleep$vore)
proportions(table(msleep$vore))
# Counts:
table(msleep$vore, msleep$conservation)
# Proportions, per row:
proportions(table(msleep$vore, msleep$conservation),
margin = 1)
# Proportions, per column:
proportions(table(msleep$vore, msleep$conservation),
margin = 2)
# Proportions, out of total:
proportions(table(msleep$vore, msleep$conservation))
?penguins
summary(penguins)
str(penguins)
table(penguins$species)
table(penguins$island)
table(penguins$sex)
# the most basic version of a plot:
plot(msleep$sleep_total, msleep$sleep_rem)
# now if we want to add further customization using the ggplot2 package:
ggplot(msleep, # this is the data we will be using for the plot
aes(sleep_total, sleep_rem, # we will specifically be looking at sleep_total on the x and sleep_rem on the y axis
colour = vore)) + # the colors of the points will be by vore and a legend will be added for this
geom_point() + # the type of graph we are creating is a point plot
labs(
title = "Total Sleep Time vs Rem Sleep", # this will give us a title on our graph
subtitle = "Using the msleep data", # this creates a subtitle on the graph
x = "Total sleep time (h)", # this renames the x axis
y = "Rem sleep (h)", # this renames the y axis
colour = "Feeding Behavior" # this renames the legend
)
ggplot(penguins, aes(bill_length_mm, flipper_length_mm, colour = species)) +
geom_point() +
install.packages("ggplot2")
labs(
x = "Bill length (mm)",
y = "Flipper length (mm)"
)
ggplot(penguins, aes(bill_length_mm, flipper_length_mm, colour = species)) +
geom_point(alpha = 0.25) + # changing the alpha changes the transparency of the points on the plot
labs(
x = "Bill length (mm)",
y = "Flipper length (mm)"
)
?shape
ggplot(penguins, aes(bill_length_mm, flipper_length_mm, colour = species)) +
geom_point(alpha = 1,
aes(shape = island) # now the shape of the points will differ depending on the island variable
) +
labs(
x = "Bill length (mm)",
y = "Flipper length (mm)"
)
ggplot(penguins, aes(bill_length_mm, flipper_length_mm, colour = species)) +
geom_point(alpha = 1,
aes(shape = island,
size = body_mass_g)) + # now the size is based on body mass
labs(
x = "Bill length (mm)",
y = "Flipper length (mm)"
)
ggplot(msleep, aes(brainwt, sleep_total, colour = vore)) +
geom_point() +
labs(x = "Brain weight",
y = "Total sleep time")
# too much of the data from this plot is hugging the left axis
ggplot(msleep, aes(brainwt, sleep_total, colour = vore)) +
geom_point() +
labs(x = "Brain weight",
y = "Total sleep time") +
xlim(0, 1.5) # now we can remove the extreme outliers and see the plot better
ggplot(msleep, aes(log(brainwt), sleep_total, colour = vore)) +
geom_point() +
labs(x = "log(Brain weight)",
y = "Total sleep time")
options(scipen = 1000) # this controls the scientific notion view of the x axis so we can see what the numbers are
ggplot(msleep, aes(brainwt, sleep_total, colour = vore)) +
geom_point() +
labs(x = "Brain weight (logarithmic scale)",
y = "Total sleep time") +
scale_x_log10() # now transforming the log10, we can see the values a lot better
ggplot(msleep, aes(bodywt, brainwt, colour = sleep_total)) +
geom_point() +
labs(
x = "Body Weight (logarithmic scale)",
y = "Brain Weight (logarithmic scale)"
) +
scale_x_log10() +
scale_y_log10()
ggplot(msleep, aes(brainwt, sleep_total)) +
geom_point() +
labs(x = "Brain weight (logarithmic scale)",
y = "Total sleep time") +
scale_x_log10() +
facet_wrap(~ vore) # this means that for each unique `vore` there will be a different graph of plots
ggplot(penguins, aes(bill_length_mm, flipper_length_mm)) +
geom_point() +
labs(x = "Bill length (mm)",
y = "Flipper length (mm)") +
facet_wrap(~ species)
?facet_wrap
ggplot(penguins, aes(bill_length_mm, flipper_length_mm)) +
geom_point() +
labs(x = "Bill length (mm)",
y = "Flipper length (mm)") +
facet_wrap(~ species,
nrow = 2)
# Base R:
boxplot(sleep_total ~ vore, data = msleep)
# ggplot2:
ggplot(msleep, aes(vore, sleep_total)) +
geom_boxplot()
ggplot(penguins, aes(species, bill_length_mm)) +
geom_boxplot()
?geom_boxplot
# colors are changes:
# geom_boxplot(fill = "white", colour = "red")
ggplot(penguins, aes(species, bill_length_mm)) +
geom_boxplot() +
geom_jitter(size = 0.5, alpha = 0.25) # this is now going to add the points that are being summarized in the boxplot
# Base R:
hist(msleep$sleep_total)
# ggplot2:
ggplot(msleep, aes(sleep_total)) +
geom_histogram()
ggplot(penguins, aes(bill_length_mm)) +
geom_histogram()
ggplot(penguins, aes(bill_length_mm)) +
geom_histogram() +
facet_wrap(~ species)
ggplot(penguins, aes(bill_length_mm)) +
geom_histogram(colour = "black")
# Base R:
barplot(table(msleep$vore))
# ggplot2:
ggplot(msleep, aes(vore)) +
geom_bar()
ggplot(msleep, aes(factor(1), fill = vore)) +
geom_bar()
ggplot(penguins, aes(species)) +
geom_bar()
ggplot(penguins, aes(species)) +
geom_bar(fill = "purple")
ggplot(penguins, aes(species)) +
geom_bar(fill = "purple", width = 0.5)
ggplot(penguins, aes(species, fill = sex)) +
geom_bar()
ggplot(penguins, aes(species, fill = sex)) +
geom_bar(position = "dodge") # this will have the "sex" types as bars side by side for the species instead of stacked
ggplot(penguins, aes(species, fill = sex)) +
geom_bar(position = "dodge") +
coord_flip() # this is now going to make the graph horizontal instead of vertical
myPlot <- ggplot(msleep, aes(sleep_total, sleep_rem)) +
geom_point()
myPlot + labs(x = "I forgot to add a label!")
ggsave("sample_plot.jpg", myPlot, width = 5, height = 5)
x <- 6
y <- "Scotland"
z <- TRUE
class(x)
class(y)
class(z)
numbers <- c(6, 9, 12)
class(numbers)
all_together <- c(x, y, z)
all_together
class(all_together)
# First, an example of data stored in a matrix:
?WorldPhones
class(WorldPhones)
View(WorldPhones)
# Next, an example of data stored in a data frame:
?airquality
class(airquality)
View(airquality)
# Finally, an example of data stored in a tibble:
library(ggplot2)
?msleep
class(msleep)
View(msleep)
WorldPhonesDF <- as.data.frame(WorldPhones)
class(WorldPhonesDF)
airqualityMatrix <- as.matrix(airquality)
class(airqualityMatrix)
text_variable <- "This is a test"
class(text_variable) # character
text_variable_2 <- 'Using single quotes now' # no difference using single or double quotes
class(text_variable_2) # character
sum_1 <- 1 + 2
sum_2 <- 1L + 2
sum_3 <- 1L + 2L
class(sum_1) # numeric
class(sum_2) # numeric
class(sum_3) # integer
test_1 <- "Hello" + 1
class(test_1) # error
test_2 <- FALSE * 2
test_3 <- TRUE + 1
class(test_2) # numeric
class(test_3) # numeric
ncol(WorldPhonesDF) # number of columns
nrow(WorldPhonesDF) # number of rows
dim(WorldPhonesDF) # dimension of the dataframe (rows x columns)
names(WorldPhonesDF) # column names
row.names(WorldPhonesDF) # row names (from the first column)
?matrix
x <- 1:6
matrix_1 <- matrix(data = x,
nrow = 2,
ncol = 3)
class(matrix_1)
matrix_1
matrix_2 <- matrix(data = x,
nrow = 3,
ncol = 2)
class(matrix_2)
matrix_2
airquality$Temp[5]
# First, we check the order of the columns:
names(airquality)
# We see that Temp is the 4th column.
airquality[5, 4]    # The 5th element from the 4th column,
# i.e. the same as airquality$Temp[5]
airquality[5,]      # The 5th row of the data
airquality[, 4]     # The 4th column of the data, like airquality$Temp
airquality[[4]]     # The 4th column of the data, like airquality$Temp
airquality[, c(2, 4, 6)] # The 2nd, 4th and 6th columns of the data
airquality[, -2]    # All columns except the 2nd one
airquality[, c("Temp", "Wind")] # The Temp and Wind columns
airquality[1:5, ]
cor(airquality[,3:4])
cor(airquality[,3], airquality[,4])
cor(airquality[,"Wind"], airquality[,"Temp"])
airquality[, -c(3, 4)]
age <- c(28, 48, 47, 71, 22, 80, 48, 30, 31)
purchase <- c(20, 59, 2, 12, 22, 160, 34, 34, 29)
bookstore <- data.frame(age, purchase)
bookstore$age[2] <- 18
# or
bookstore[2, 1] <- 18
bookstore
bookstore$age <- bookstore$age * 12
bookstore
bookstore$age <- bookstore$age / 12
bookstore
bookstore$visit_length <- c(5, 2, 20, 22, 12, 31, 9, 10, 11)
bookstore
bookstore$rev_per_minute <- bookstore$purchase / bookstore$visit_length
bookstore
bookstore$age[6] <- 16
bookstore
which.max(airquality$Temp) # this is asking what is the maximum volume in this column; will return what the index value of the first column is so in this case: day 120
airquality[120, ] # then we can pull the rest of the values in the row now that we know what the first value is
airquality[which.max(airquality$Temp),] # this is the way to do it all in one line
airquality_hotdays <- subset(airquality, Temp > 90)
airquality_hotdays
a <- 3
b <- 8
a == b     # Check if a equals b
a > b      # Check if a is greater than b
a < b      # Check if a is less than b
a >= b     # Check if a is equal to or greater than b
a <= b     # Check if a is equal to or less than b
a != b     # Check if a is not equal to b
is.na(a)   # Check if a is NA
a %in% c(1, 4, 9) # Check if a equals at least one of 1, 4, 9
which(airquality$Temp > 90) # returns the indices of the elements that match the condition
all(airquality$Temp > 90) # returns TRUE or FALSE depends on if all the values in that column match the condition
any(airquality$Temp > 90) # this will return TRUE or FALSE depends if any of the values match the condition
sum(airquality$Temp > 90) # this is going to return the sum of all the numbers in this column
a <- 3
b <- 8
# Is a less than b and greater than 1?
a < b & a > 1
# Is a less than b and equal to 4?
a < b & a == 4
# Is a less than b and/or equal to 4?
a < b | a == 4
# Is a equal to 4 and/or equal to 5?
a == 4 | a == 5
# Is a less than b XOR equal to 4?
# I.e. is one and only one of these satisfied?
xor(a < b, a == 4)
which.min(airquality$Temp)
# day 5
sum(airquality$Wind > 17)
# 3 days
sum(is.na(airquality$Ozone))
# 37 missing values
sum(airquality$Temp < 70 & airquality$Wind > 10)
# 22 days
airquality$TempCat <- cut(airquality$Temp,
breaks = c(50, 70, 90, 110))
airquality
aggregate(Temp ~ Month, data = airquality, FUN = mean) # `FUN` is which function we are using to compute the data with; here it is mean
aggregate(cbind(Temp, Wind) ~ Month, data = airquality, FUN = sd) # here we are computing standard deviation
aggregate(Temp ~ Month, data = airquality, FUN = length)
by(airquality$Temp, airquality$Month, mean)
names(airquality) # to check which columns the Wind (3) and Temp (4) are
by(airquality[ , 3:4], airquality$Month, cor)
install.packages('datasauRus')
library(datasauRus)
?datasaurus_dozen
mean(datasaurus_dozen$x)
mean(datasaurus_dozen$y)
sd(datasaurus_dozen$y)
by(datasaurus_dozen[ , 2:3], datasaurus_dozen$dataset, cor)
ggplot(datasaurus_dozen, aes(x, y)) +
geom_point() +
facet_wrap(~dataset)
install.packages("dplyr")
library(dplyr)
# old way of writing code:
# new_variable <- function_2(function_1(your_data))
# new way with piping
# your_data |> function_1() |> function_2() -> new_variable
# Extract hot days:
airquality2 <- filter(airquality, Temp > 80)
# Convert wind speed to m/s:
airquality2 <- mutate(airquality, Wind = Wind * 0.44704)
# Compute mean wind speed for each month:
airquality <- group_by(airquality, Month)
hot_wind_means <- summarise(airquality, Mean_wind_speed = mean(Wind))
hot_wind_means
airquality |>
filter(Temp > 80) |>
mutate(Wind = Wind * 0.44704) |>
group_by(Month) |>
summarise(Mean_wind_speed = mean(Wind)) ->
hot_wind_means
hot_wind_means
age <- c(28, 48, 47, 71, 22, 80, 48, 30, 31)
purchase <- c(20, 59, 2, 12, 22, 160, 34, 34, 29)
visit_length <- c(5, 2, 20, 22, 12, 31, 9, 10, 11)
bookstore <- data.frame(age, purchase, visit_length)
library(magrittr)
bookstore |> mutate(rev_per_minute = purchase/visit_length) -> bookstore
bookstore
library(ggplot2)
# this won't work:
# msleep |> cor(sleep_total, sleep_rem, use = "complete.obs")
# this will work:
msleep |> with(cor(sleep_total, sleep_rem, use = "complete.obs"))
airquality |>
aggregate(Temp ~ Month,
data = _,
FUN = mean)
# imported_data <- read.csv("data_file.csv")
# to have a popup open to select which data you want to use:
# imported_data2 <- read.csv(file.choose())
library(palmerpenguins)
# we want to see the frequency (amount of times) each value occurs in the data
# so lets take a look at species of penguins
table(penguins$species) # without pipes
library(dplyr)
penguins |> select(species) |> table() # with pipes
# install the additional packages:
install.packages(c("gtsummary", "flextable", "ivo.table"))
library(gtsummary)
library(dplyr)
tbl_summary(penguins[, "species"]) # without pipes
install.packages("dplyr")
install.packages(c("gtsummary", "flextable", "ivo.table"))
penguins |>
select(species) |>
tbl_summary()
library(flextable)
penguins |>
select(species) |>
tbl_summary() |>
as_flex_table() |> # Convert the table to a format that can be exported
save_as_docx(path = "sample_my_table.docx")
library(flextable)
penguins |>
select(species) |>
tbl_summary() |>
as_flex_table() |> # Convert the table to a format that can be exported
save_as_docx(path = "sample_my_table.docx")
library(ivo.table)
ivo_table(penguins[,"species"]) # without pipes
library(dplyr)
library(ivo.table)
penguins |>
select(species) |>
ivo_table()
penguins |>
select(species) |>
ivo_table(color = "darkred",
font = "Garamond",
percent_by = "row")
penguins |>
select(species) |>
ivo_table(long_table = TRUE)
library(flextable)
penguins |>
select(species) |>
ivo_table() |>
save_as_docx(path = "sample_my_table2.docx")
ftable(penguins$species,
penguins$island) # without pipes
penguins |>
select(species, island) |>
ftable()
library(ivo.table)
penguins |> select(species, island) |>
ivo_table(color = "darkred",
font = "Garamond",
percent_by = "tot",
highlight_cols = 2,
highlight_rows = 3) |>
save_as_docx(path = "penguins.docx")
library(ivo.table)
penguins |> select(species, island) |>
ivo_table(color = "darkred",
font = "Garamond",
percent_by = "tot",
highlight_cols = 2,
highlight_rows = 3) |>
save_as_docx(path = "penguins.docx")
penguins |> select(species, island) |>
ivo_table(color = "darkred",
font = "Garamond",
percent_by = "tot",
highlight_cols = 2,
highlight_rows = 3)
library(gtsummary)
tbl_summary(penguins[,c("species",
"island")],
by = species) # without pipes
library(dplyr)
library(gtsummary)
penguins |>
select(species, island) |>
tbl_summary(by = species)
